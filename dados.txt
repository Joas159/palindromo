algoritmo de análise de número palíndromo
-----------------------------------------------------------------------
Método reverse()

O “reverse()” inverte a ordem dos elementos do nosso array, veja:

var array1 = ['branco', 10, 20, 30, "novo elemento"];
array1.reverse();
console.log(array1);

E o resultado no nosso console é:

["novo elemento", 30, 20, 10, "branco"]
-----------------------------------------------------------------------

> Sobre nosso belo Front
O layout será o que o seu coração mandar, um bom uso de UI/UX serão muito bem avaliados como diferenciais. 
Se você quiser utilizar Angular 8^ ou React será bem legal, mas não obrigatório.
Solte toda a sua criatividade, não vamos especificar nada aqui :)

> Sobre o nosso inteligente Back
Ele deve, obrigatoriamente, ser construído com Node.js.
Deve ser utilizado Testes Unitários na aplicação, o percentual de cobertura dos testes e por sua conta.
-----------------------------------------------------------------------

1-	Números palíndromos são aqueles que escritos da direita para esquerda ou da esquerda para direita tem o 
mesmo valor. Exemplo: 929, 44, 97379. Fazer um algoritmo que imprima todos os números palíndromos entre um 
intervalo que será escolhido pelo usuário da aplicação.
-- determinar o número como palíndromo ou não;
-- laço de repetição para o intervalo numérico escolhido pelo usuário;

  const isPalindrome(text)→{
  const palindrome=text.split(**).
  .reverse()
  .join('');
  return palindrome text?'Palindrome confirmado:'Nao eh um palindrome';
  }

   console.log(ispalindrome('amoraroma'));

2-	Suponha que um caixa disponha apenas de notas de 1, 10 e 100 reais. Considerando que alguém está pagando 
uma compra, escreva um algoritmo que mostre o número mínimo de notas que o caixa deve fornecer como troco. 
Mostre também: o valor da compra, o valor do troco e a quantidade de cada tipo de nota do troco. Suponha que 
o sistema monetário não utilize moedas. O valor da compra e o valor de dinheiro entregue ao caixa deve ser 
informado pelo usuário.
-- https://www.youtube.com/watch?v=rEMJP66BdnE


3-	Deve ser informado pelo usuário 5 CEP’s, a aplicação deve consumir a api VIACep (https://viacep.com.br/) 
e obtiver dados sobre esses CEP’s. Os CEP’s informados pelo usuário devem ser inicialmente armazenados em um 
array, e o consumo da API deve ser de forma síncrona (aguardar a resposta do primeiro para iniciar a requisição 
do segundo e assim por diante). Os dados após o processamento devem ser exibidos na tela.
-- VIACEP

4-	Precisamos controlar melhor os dados de alguns veículos que ficam na nossa garagem e para isso precisamos 
que seja feito o seguinte:
a)	Crie a interface “Veiculo” com os seguintes atributos:
– Modelo
– Ano de fabricação
– Quantidade de Portas
– Marca

b)	Crie a classe “Carro”, que herda de Veículo e tem os seguintes atributos:
– Quantidade de Portas: entre 2 e 4

c)	Crie a classe “Moto”, que herda de Veículo, e possui os seguintes atributos:
– Rodas: 2
– Passageiros: entre 1 e 2

Deve ser solicitado ao usuário que preencha as informações sobre o seu veículo, os dados devem ser salvos em 
um arquivo JSON (para não precisar trabalhar com banco de dados, até porquê já vai ser bem próximo de um 
banco NoSQL);
-----------------------------------------------------------------------
> A tão esperada entrega
A sua aplicação deve estar no github, e como entrega queremos apenas o link para podermos clonar a mesma. 
-----------------------------------------------------------------------